<?php

/**
 * Implements hook_menu().
 */
function themekey_redirect_menu() {
  $items = array();

  $items['admin/config/user-interface/themekey/redirects'] = array(
    'title' => 'Redirecting Rule Chain',
    'description' => 'Set up rules to redirect the user, depending on Drupal paths or different properties.',
    'access callback' => 'user_access',
    'access arguments' => array('administer theme assignments'),
    'file' => 'themekey_redirect_admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('themekey_redirect_rule_chain_form'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/user-interface/themekey/redirects/delete'] = array(
    'title' => 'Delete ThemeKey Redirect Rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('themekey_redirect_admin_delete_rule_confirm', 1),
    'access callback' => 'user_access',
    'access arguments' => array('administer theme assignments'),
    'file' => 'themekey_redirect_admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['themekey/redirect_callback'] = array(
    'title' => 'ThemeKey Redirect Callback',
    'page callback' => 'themekey_redirect_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function themekey_redirect_theme() {
  $items = array(
    'themekey_redirect_rule_chain_form' => array(
      'file' => 'themekey_redirect_admin.inc',
      'render element' => 'form',
    ),
    'themekey_redirect_domain_selector_links' => array(
      'template' => 'themekey_redirect_domain_selector_links',
      'variables' => array(
        'links' => array(),
      ),
    ),
  );
  return $items;
}

function themekey_redirect_format_rule_as_string($themekey_property_id) {
  module_load_include('inc', 'themekey', 'themekey_build');
  return themekey_abstract_format_rule_as_string($themekey_property_id, array(
    'rule' => themekey_redirect_rule_get($themekey_property_id),
  ));
}

/**
 * Loads ThemeKey rule from database.
 *
 * @param $id
 *   id of the rule to be loaded from database
 *
 * @return
 *   the rule as associative array or NULL
 */
function themekey_redirect_rule_get($id) {
  return themekey_abstract_rule_get('themekey_redirect_rules', $id);
}

/**
 * Implements hook_init().
 */
function themekey_redirect_init() {
  if (themekey_is_active()) {

    if (isset($_GET['themekey_redirect'])) {
      // Ensure to have javascriüpt based switching for anonymous users in page cache.
      drupal_add_js(drupal_get_path('module', 'themekey_redirect') . '/themekey_redirect.js');

      if ('active' == $_GET['themekey_redirect']) {
        setcookie('themekey_redirect_state', 1, 0, '/');
      }
      elseif ('avoid' == $_GET['themekey_redirect']) {
        setcookie('themekey_redirect_state', 2, 0, '/');
      }
    }
    elseif (empty($_COOKIE['themekey_redirect_state'])) {
      setcookie('themekey_redirect_state', 0, 0, '/');
      $target = themekey_redirect_match_rules();
      if ($target) {
        // If we're here the page dosen't get cached at all.
        if (variable_get('themekey_debug_trace_rule_switching', FALSE)) {
          // No drupal_add_js to ensure that the debug message is visible.
          themekey_set_debug_message('Redirect to %domain. The redirect has been intercepted for debugging. Click this link to proceed: !target', array('%domain' => $target, '!target' => l($target, $target)));
        }
        else {
          // No drupal_add_js because it won't be executed.
          drupal_goto($target);
        }
      }
      else {
        // Ensure to have javascriüpt based switching for anonymous users in page cache.
        drupal_add_js(drupal_get_path('module', 'themekey_redirect') . '/themekey_redirect.js');
      }
    }
    else {
      if (variable_get('themekey_debug_trace_rule_switching', FALSE)) {
        // No drupal_add_js to ensure that the debug message is visible.
        themekey_set_debug_message('Redirect previously happend for this client. This feature is now turned off until the browser has been closed.');
      }

      // Ensure to have javascriüpt based switching for anonymous users in page cache.
      drupal_add_js(drupal_get_path('module', 'themekey_redirect') . '/themekey_redirect.js');
    }
  }
}

function themekey_redirect_match_rules() {
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'themekey') . '/themekey_base.inc';
  $parameters = themekey_get_global_parameters();
  $result = themekey_match_rule_childs($parameters, array(
    'table' => 'themekey_redirect_rules',
    'format_rule_as_string_callback' => 'themekey_redirect_format_rule_as_string',
    'check_enabled_callback' => 'themekey_redirect_check_different_url',
    'stop_on_check_enabled_false' => TRUE,
  ));

  if (is_array($result) && 'default' != $result['theme']) {
    drupal_alter('themekey_redirect', $result['theme'], $result['rules_matched']);

    return url($result['theme'] . $_SERVER['REQUEST_URI'], array('query' => array('themekey_redirect' => 'active')));
  }

  return FALSE;
}

function themekey_redirect_callback() {
  // clean-up the URI path for rule matching
  $_GET['q'] = implode('/', func_get_args());
  $_SERVER['REQUEST_URI'] = str_replace('/themekey/redirect_callback', '', $_SERVER['REQUEST_URI']);
  return themekey_redirect_match_rules();
}

/**
 * Implements hook_help().
 */
function themekey_redirect_help($path, $arg) {
  switch ($path) {
    case 'admin/config/user-interface/themekey/redirects':
      if (!function_exists('themekey_help_properties_form')) {
        module_load_include('inc', 'themekey', 'themekey_help');
      }
      $properties_form = drupal_get_form('themekey_help_properties_form', TRUE);
      $operators_form = drupal_get_form('themekey_help_operators_form', TRUE);
      $text_1 = t('For every page request, Drupal steps through this Redirecting Rule Chain until an activated rule matches or it reaches the end. If a rule matches, the redirect associated with this rule will be performed.');

      return '<p>' . $text_1 . '</p> ' .
        drupal_render($properties_form) .
        drupal_render($operators_form);
  }
}

/**
 * Avoid a redirect loop by not redirecting to current domain.
 *
 * @param $url
 * @return bool
 */
function themekey_redirect_check_different_url($url) {
  $parts = parse_url($url);
  $host = $parts['host'];
  if (isset($parts['port']) && ($parts['port'] != 80) && ($parts['port'] != 443)) {
    $host .= ':' . $parts['port'];
  }

  return (
    $host != $_SERVER['HTTP_HOST']
  );
}

function themekey_redirect_themekey_page_cache_support_alter(&$page_cache, $key, $form_id) {
  if ('themekey_redirect_rule_chain_form' == $form_id) {
    $page_cache = THEMEKEY_PAGECACHE_SUPPORTED;
  }
}

/**
 * Implements hook_block().
 */
function themekey_redirect_block_info() {
  $blocks['domain_selector'] = array(
    'info' => t('ThemeKey Redirect Domain Selector'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function themekey_redirect_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'domain_selector':
      $form['domain_list'] = array(
        '#type' => 'textarea',
        '#title' => t('Domain Targets'),
        '#description' => t('One entry per line, format: domain|link title'),
        '#default_value' => themekey_redirect_encode_domain_selector(variable_get('themekey_redirect_domain_selector', array())),
      );
      break;
  }

  $form['#validate'][] = 'themekey_redirect_block_validate';

  return $form;
}

function themekey_redirect_block_validate(&$form, $form_state) {
  switch ($form['delta']['#value']) {
    case 'domain_selector':
      //form_set_error('domain_list', t('Todo'));
      break;
  }
}

/**
 * Implements hook_block_save().
 */
function themekey_redirect_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'domain_selector':
      variable_set('themekey_redirect_domain_selector', themekey_redirect_parse_domain_selector($edit['domain_list']));
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function themekey_redirect_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'domain_selector':
      if ($links = variable_get('themekey_redirect_domain_selector', array())) {
        $block['subject'] = t('You have been redirected automatically.');
        $block['content'] = theme('themekey_redirect_domain_selector_links', array('links' => $links));
        drupal_add_css(drupal_get_path('module', 'themekey_redirect') . '/themekey_redirect_domain_selector.css');
      }
      break;
  }

  return $block;
}

function themekey_redirect_preprocess_themekey_redirect_domain_selector_links(&$vars) {
  $vars['links_rendered'] = array();
  foreach ($vars['links'] as $url => $link) {
    if (themekey_redirect_check_different_url($url)) {
      $vars['links_rendered'][] = l(t($link), $url . str_replace('themekey_redirect=active', '', $_SERVER['REQUEST_URI']), array('query' => array('themekey_redirect' => 'avoid')));
    }
  }
}

function themekey_redirect_parse_domain_selector($domain_selector_string) {
  $domain_selector = array();
  $domain_selector_string = trim($domain_selector_string, " \r\n");
  $lines = explode("\n", $domain_selector_string);
  foreach ($lines as $line) {
    @list($url, $link) = explode('|', $line);
    $url = trim($url, " \r\n");
    $link = trim($link, " \r\n");
    $domain_selector[$url] = $link ? $link : $url;
  }
  return $domain_selector;
}

function themekey_redirect_encode_domain_selector($domain_selector) {
  $domain_selector_strings = array();
  foreach ($domain_selector as $url => $link) {
    $domain_selector_strings[] = $url . '|' . $link;
  }
  return implode("\n", $domain_selector_strings);
}
